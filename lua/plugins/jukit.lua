return {
  "luk400/vim-jukit",
  ft = { "python" },
  -- keys = {
  --   { "<cr>", ":call jukit#send#line()<cr>", desc = "Send Line" },
  -- },
}

-- nnoremap <leader>os :call jukit#splits#output()<cr>
-- "   - Opens a new output window and executes the command specified in `g:jukit_shell_cmd`
-- nnoremap <leader>ts :call jukit#splits#term()<cr>
-- "   - Opens a new output window without executing any command
-- nnoremap <leader>hs :call jukit#splits#history()<cr>
-- "   - Opens a new output-history window, where saved ipython outputs are displayed
-- nnoremap <leader>ohs :call jukit#splits#output_and_history()<cr>
-- "   - Shortcut for opening output terminal and output-history
-- nnoremap <leader>hd :call jukit#splits#close_history()<cr>
-- "   - Close output-history window
-- nnoremap <leader>od :call jukit#splits#close_output_split()<cr>
-- "   - Close output window
-- nnoremap <leader>ohd :call jukit#splits#close_output_and_history(1)<cr>
-- "   - Close both windows. Argument: Whether or not to ask you to confirm before closing.
-- nnoremap <leader>so :call jukit#splits#show_last_cell_output(1)<cr>
-- "   - Show output of current cell (determined by current cursor position) in output-history window. Argument: Whether or not to reload outputs if cell id of outputs to display is the same as the last cell id for which outputs were displayed
-- nnoremap <leader>j :call jukit#splits#out_hist_scroll(1)<cr>
-- "   - Scroll down in output-history window. Argument: whether to scroll down (1) or up (0)
-- nnoremap <leader>k :call jukit#splits#out_hist_scroll(0)<cr>
-- "   - Scroll up in output-history window. Argument: whether to scroll down (1) or up (0)
-- nnoremap <leader>ah :call jukit#splits#toggle_auto_hist()<cr>
-- "   - Create/delete autocmd for displaying saved output on CursorHold. Also, see explanation for `g:jukit_auto_output_hist`
-- nnoremap <leader>sl :call jukit#layouts#set_layout()<cr>
-- "   - Apply layout (see `g:jukit_layout`) to current splits - NOTE: it is expected that this function is called from the main file buffer/split
--
-- nnoremap <leader><space> :call jukit#send#section(0)<cr>
-- "   - Send code within the current cell to output split (also saves the output if ipython is used and `g:jukit_save_output==1`). Argument: if 1, will move the cursor to the next cell below after sending the code to the split, otherwise cursor position stays the same.
-- nnoremap <cr> :call jukit#send#line()<cr>
-- "   - Send current line to output split
-- vnoremap <cr> :<C-U>call jukit#send#selection()<cr>
-- "   - Send visually selected code to output split
-- nnoremap <leader>cc :call jukit#send#until_current_section()<cr>
-- "   - Execute all cells until the current cell
-- nnoremap <leader>all :call jukit#send#all()<cr>
-- "   - Execute all cells
--
-- nnoremap <leader>co :call jukit#cells#create_below(0)<cr>
-- "   - Create new code cell below. Argument: Whether to create code cell (0) or markdown cell (1)
-- nnoremap <leader>cO :call jukit#cells#create_above(0)<cr>
-- "   - Create new code cell above. Argument: Whether to create code cell (0) or markdown cell (1)
-- nnoremap <leader>ct :call jukit#cells#create_below(1)<cr>
-- "   - Create new textcell below. Argument: Whether to create code cell (0) or markdown cell (1)
-- nnoremap <leader>cT :call jukit#cells#create_above(1)<cr>
-- "   - Create new textcell above. Argument: Whether to create code cell (0) or markdown cell (1)
-- nnoremap <leader>cd :call jukit#cells#delete()<cr>
-- "   - Delete current cell
-- nnoremap <leader>cs :call jukit#cells#split()<cr>
-- "   - Split current cell (saved output will then be assigned to the resulting cell above)
-- nnoremap <leader>cM :call jukit#cells#merge_above()<cr>
-- "   - Merge current cell with the cell above
-- nnoremap <leader>cm :call jukit#cells#merge_below()<cr>
-- "   - Merge current cell with the cell below
-- nnoremap <leader>ck :call jukit#cells#move_up()<cr>
-- "   - Move current cell up
-- nnoremap <leader>cj :call jukit#cells#move_down()<cr>
-- "   - Move current cell down
-- nnoremap <leader>J :call jukit#cells#jump_to_next_cell()<cr>
-- "   - Jump to the next cell below
-- nnoremap <leader>K :call jukit#cells#jump_to_previous_cell()<cr>
-- "   - Jump to the previous cell above
-- nnoremap <leader>ddo :call jukit#cells#delete_outputs(0)<cr>
-- "   - Delete saved output of current cell. Argument: Whether to delete all saved outputs (1) or only saved output of current cell (0)
-- nnoremap <leader>dda :call jukit#cells#delete_outputs(1)<cr>
-- "   - Delete saved outputs of all cells. Argument: Whether to delete all saved outputs (1) or only saved output of current cell (0)
